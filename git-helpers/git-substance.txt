Good Commits are Important

- Good commits help preserve the history of the code base. 
- They help with: 
	1. Debugging & troubleshooting.
	2. Creating release notes. 
	3. Code Reviews. 
	4. Rolling back. 
	5. Associating the code with an issue or ticket. 
- 
- You do not have to commit with: git commit -m 

A Good Commit Message: 
---
git-rebase: don't ignore unexpected command line args 

Currently, git-rebase will silently ignore any unexpected command-line
switches and arguments (the command-line produced by git rev-parse).
This allowed the rev-parse bug, fixed in the preceding commits, to go 
unnoticed. Let's make sure that doesn't happen again. We shouldn't be 
ignoring unexpected arguments. Let's not.
... 

Good Git commit message Practices: 
	Commit message is in future tense or past tense? 'Fix' vs 'Fixed'. 
	Short subject, followed by a blank line. 
	A description of the current behavior, a short summary of 'why' the fix is need. 
	Mention side effects.


History/Diffs 
- git log 
- git log --since="yesterday" 
- git log --since="2 weeks ago"
- git log --name-status --follow -- <file> (find file that was renamed)
- git log --grep <regexp> 
  git log --grep=mail --author=larry --since=2.weeks 
  git log --grep='i18n' --author=larry --since=2.weeks 
- git log --diff-filter=R --stat (selectively include/exclude files that have been Added, Deleted or Modified)
- git log --diff-filter=M --oneline 
- git log --diff-filter=R --find-renames

- ^ or ^n 
  ^ == ^1: the first parent commit 
  n: the nth parent commit 
- ~ or ~n
  no args: == ~1: the first commit <back>, folllowing the 1st parent 
  n: args of commits <back>, <following> only 1st parent 

Note: ^ and ~ can be combined 

- git show <commit> 
- git show <commit> --stat (show files changed in commit)
- git show <commit>:<file> (look at a file from another commit)


Diff shows you changes: 
- between commits, staging area/repo, working area 

- git diff (unstaged changes)
- git diff --staged (staged changes) git branch --merged master git branch --no-merged master 

Fixing Mistakes 
- checkout (this is a destructive operation) 
- reset (git reset is destructive if you add the wrong switches like --hard)
- revert (moves head::git reset --soft HEAD~)
- clean (clear your working area by deleting untracked files)
   git clean --dry-run
   git clean -d --dry-run 
   git clean -d -f (blows away cruft)
