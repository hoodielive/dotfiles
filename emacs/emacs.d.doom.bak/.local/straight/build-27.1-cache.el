
:tanat

"27.1"

#s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("org-elpa" ("2020-12-27 00:12:45" nil (:local-repo nil :package "org-elpa" :type git)) "melpa" ("2020-12-27 00:12:37" nil (:type git :host github :repo "melpa/melpa" :no-build t :package "melpa" :local-repo "melpa")) "gnu-elpa-mirror" ("2020-12-27 00:12:37" nil (:type git :host github :repo "emacs-straight/gnu-elpa-mirror" :no-build t :package "gnu-elpa-mirror" :local-repo "gnu-elpa-mirror")) "el-get" ("2020-12-27 00:12:37" nil (:type git :host github :repo "dimitri/el-get" :no-build t :files ("*.el" ("recipes" "recipes/el-get.rcp") "methods" "el-get-pkg.el") :flavor melpa :package "el-get" :local-repo "el-get")) "emacsmirror-mirror" ("2020-12-27 00:12:37" nil (:type git :host github :repo "emacs-straight/emacsmirror-mirror" :no-build t :package "emacsmirror-mirror" :local-repo "emacsmirror-mirror")) "straight" ("2020-12-27 00:12:37" ("emacs") (:host github :repo "raxod502/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el") :package "straight" :type git)) "use-package" ("2020-12-27 00:12:37" ("emacs" "bind-key") (:type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package" :package "use-package" :local-repo "use-package")) "bind-key" ("2020-12-27 00:12:37" nil (:flavor melpa :files ("bind-key.el" "bind-key-pkg.el") :package "bind-key" :local-repo "use-package" :type git :repo "jwiegley/use-package" :host github)) "auto-minor-mode" ("2020-12-27 00:12:37" ("emacs") (:type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode" :package "auto-minor-mode" :local-repo "auto-minor-mode")) "gcmh" ("2020-12-27 00:12:37" ("emacs") (:type git :flavor melpa :host gitlab :repo "koral/gcmh" :package "gcmh" :local-repo "gcmh")) "explain-pause-mode" ("2020-12-27 00:12:37" nil (:host github :repo "lastquestion/explain-pause-mode" :package "explain-pause-mode" :type git :local-repo "explain-pause-mode")) "all-the-icons" ("2020-12-27 00:12:37" ("emacs" "memoize") (:type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el" :package "all-the-icons" :local-repo "all-the-icons.el")) "memoize" ("2020-12-27 00:12:37" nil (:type git :flavor melpa :host github :repo "skeeto/emacs-memoize" :package "memoize" :local-repo "emacs-memoize")) "hide-mode-line" ("2020-12-27 00:12:37" ("emacs") (:type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line" :package "hide-mode-line" :local-repo "emacs-hide-mode-line")) "highlight-numbers" ("2020-12-27 00:12:37" ("emacs" "parent-mode") (:type git :flavor melpa :host github :repo "Fanael/highlight-numbers" :package "highlight-numbers" :local-repo "highlight-numbers")) "parent-mode" ("2020-12-27 00:12:37" nil (:type git :flavor melpa :host github :repo "Fanael/parent-mode" :package "parent-mode" :local-repo "parent-mode")) "rainbow-delimiters" ("2020-12-27 00:12:37" nil (:type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters" :package "rainbow-delimiters" :local-repo "rainbow-delimiters")) "restart-emacs" ("2020-12-27 00:12:37" nil (:type git :flavor melpa :host github :repo "iqbalansari/restart-emacs" :package "restart-emacs" :local-repo "restart-emacs")) "better-jumper" ("2020-12-27 00:12:37" ("emacs") (:type git :flavor melpa :host github :repo "gilbertw1/better-jumper" :package "better-jumper" :local-repo "better-jumper")) "dtrt-indent" ("2020-12-27 00:12:37" nil (:type git :flavor melpa :host github :repo "jscheid/dtrt-indent" :package "dtrt-indent" :local-repo "dtrt-indent")) "helpful" ("2020-12-27 00:12:37" ("emacs" "dash" "dash-functional" "s" "f" "elisp-refs") (:type git :flavor melpa :host github :repo "Wilfred/helpful" :package "helpful" :local-repo "helpful")) "dash" ("2020-12-27 00:12:39" nil (:type git :flavor melpa :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el" :package "dash" :local-repo "dash.el")) "dash-functional" ("2020-12-27 00:12:39" ("dash" "emacs") (:flavor melpa :files ("dash-functional.el" "dash-functional-pkg.el") :package "dash-functional" :local-repo "dash.el" :type git :repo "magnars/dash.el" :host github)) "s" ("2020-12-27 00:12:39" nil (:type git :flavor melpa :files ("s.el" "s-pkg.el") :host github :repo "magnars/s.el" :package "s" :local-repo "s.el")) "f" ("2020-12-27 00:12:39" ("s" "dash") (:type git :flavor melpa :files ("f.el" "f-pkg.el") :host github :repo "rejeep/f.el" :package "f" :local-repo "f.el")) "elisp-refs" ("2020-12-27 00:12:39" ("dash" "s") (:type git :flavor melpa :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs" :package "elisp-refs" :local-repo "elisp-refs")) "pcre2el" ("2020-12-27 00:12:39" ("emacs" "cl-lib") (:type git :flavor melpa :files ("pcre2el.el" "pcre2el-pkg.el") :host github :repo "joddie/pcre2el" :package "pcre2el" :local-repo "pcre2el")) "smartparens" ("2020-12-27 00:12:39" ("dash" "cl-lib") (:type git :flavor melpa :host github :repo "Fuco1/smartparens" :package "smartparens" :local-repo "smartparens")) "ws-butler" ("2020-12-27 00:12:39" ("emacs") (:host github :repo "hlissner/ws-butler" :flavor melpa :package "ws-butler" :type git :local-repo "ws-butler")) "projectile" ("2020-12-27 00:12:39" ("emacs" "pkg-info") (:type git :flavor melpa :files ("projectile.el" "projectile-pkg.el") :host github :repo "bbatsov/projectile" :package "projectile" :local-repo "projectile")) "pkg-info" ("2020-12-27 00:12:39" ("epl") (:type git :flavor melpa :host github :repo "emacsorphanage/pkg-info" :package "pkg-info" :local-repo "pkg-info")) "epl" ("2020-12-27 00:12:39" ("cl-lib") (:type git :flavor melpa :host github :repo "cask/epl" :package "epl" :local-repo "epl")) "general" ("2020-12-27 00:12:39" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/general.el" :package "general" :local-repo "general.el")) "which-key" ("2020-12-27 00:12:39" ("emacs") (:type git :flavor melpa :host github :repo "justbur/emacs-which-key" :package "which-key" :local-repo "emacs-which-key")) "company" ("2020-12-27 00:12:39" ("emacs") (:type git :flavor melpa :host github :repo "company-mode/company-mode" :package "company" :local-repo "company-mode")) "company-dict" ("2020-12-27 00:12:39" ("emacs" "company" "parent-mode") (:type git :flavor melpa :host github :repo "hlissner/emacs-company-dict" :package "company-dict" :local-repo "emacs-company-dict")) "swiper" ("2020-12-27 00:12:39" ("emacs" "ivy") (:type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper" :package "swiper" :local-repo "swiper")) "ivy" ("2020-12-27 00:12:39" ("emacs") (:flavor melpa :files (:defaults (:exclude "swiper.el" "counsel.el" "ivy-hydra.el" "ivy-avy.el") "doc/ivy-help.org" "ivy-pkg.el") :package "ivy" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "ivy-hydra" ("2020-12-27 00:12:39" ("emacs" "ivy" "hydra") (:flavor melpa :files ("ivy-hydra.el" "ivy-hydra-pkg.el") :package "ivy-hydra" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "hydra" ("2020-12-27 00:12:39" ("cl-lib" "lv") (:type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra" :package "hydra" :local-repo "hydra")) "lv" ("2020-12-27 00:12:39" nil (:flavor melpa :files ("lv.el" "lv-pkg.el") :package "lv" :local-repo "hydra" :type git :repo "abo-abo/hydra" :host github)) "ivy-avy" ("2020-12-27 00:12:39" ("emacs" "ivy" "avy") (:flavor melpa :files ("ivy-avy.el" "ivy-avy-pkg.el") :package "ivy-avy" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "avy" ("2020-12-27 00:12:39" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "abo-abo/avy" :package "avy" :local-repo "avy")) "counsel" ("2020-12-27 00:12:39" ("emacs" "swiper") (:flavor melpa :files ("counsel.el" "counsel-pkg.el") :package "counsel" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "amx" ("2020-12-27 00:12:39" ("emacs" "s") (:type git :flavor melpa :host github :repo "DarwinAwardWinner/amx" :package "amx" :local-repo "amx")) "counsel-projectile" ("2020-12-27 00:12:39" ("counsel" "projectile") (:type git :flavor melpa :host github :repo "ericdanan/counsel-projectile" :package "counsel-projectile" :local-repo "counsel-projectile")) "ivy-rich" ("2020-12-27 00:12:39" ("emacs" "ivy") (:type git :flavor melpa :files ("*.el" "ivy-rich-pkg.el") :host github :repo "Yevgnen/ivy-rich" :package "ivy-rich" :local-repo "ivy-rich")) "wgrep" ("2020-12-27 00:12:39" nil (:type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo "Emacs-wgrep")) "doom-themes" ("2020-12-27 00:12:39" ("emacs" "cl-lib") (:type git :flavor melpa :files (:defaults "themes/*.el" "doom-themes-pkg.el") :host github :repo "hlissner/emacs-doom-themes" :package "doom-themes" :local-repo "emacs-doom-themes")) "solaire-mode" ("2020-12-27 00:12:39" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode" :package "solaire-mode" :local-repo "emacs-solaire-mode")) "hl-todo" ("2020-12-27 00:12:39" ("emacs") (:type git :flavor melpa :host github :repo "tarsius/hl-todo" :package "hl-todo" :local-repo "hl-todo")) "doom-modeline" ("2020-12-27 00:12:39" ("emacs" "all-the-icons" "shrink-path" "dash") (:type git :flavor melpa :host github :repo "seagle0128/doom-modeline" :package "doom-modeline" :local-repo "doom-modeline")) "shrink-path" ("2020-12-27 00:12:39" ("emacs" "s" "dash" "f") (:type git :flavor melpa :host gitlab :repo "bennya/shrink-path.el" :package "shrink-path" :local-repo "shrink-path.el")) "anzu" ("2020-12-27 00:12:39" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/anzu" :package "anzu" :local-repo "anzu")) "evil-anzu" ("2020-12-27 00:12:39" ("evil" "anzu") (:type git :flavor melpa :host github :repo "emacsorphanage/evil-anzu" :package "evil-anzu" :local-repo "evil-anzu")) "evil" ("2020-12-27 00:12:39" ("emacs" "goto-chg" "cl-lib") (:type git :flavor melpa :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil" :package "evil" :local-repo "evil")) "goto-chg" ("2020-12-27 00:12:39" nil (:type git :flavor melpa :host github :repo "emacs-evil/goto-chg" :package "goto-chg" :local-repo "goto-chg")) "evil-goggles" ("2020-12-27 00:12:39" ("emacs" "evil") (:type git :flavor melpa :host github :repo "edkolev/evil-goggles" :package "evil-goggles" :local-repo "evil-goggles")) "git-gutter-fringe" ("2020-12-27 00:12:39" ("git-gutter" "fringe-helper" "cl-lib" "emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe" :package "git-gutter-fringe" :local-repo "git-gutter-fringe")) "git-gutter" ("2020-12-27 00:12:39" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter" :package "git-gutter" :local-repo "git-gutter")) "fringe-helper" ("2020-12-27 00:12:39" nil (:type git :flavor melpa :host github :repo "nschum/fringe-helper.el" :package "fringe-helper" :local-repo "fringe-helper.el")) "vi-tilde-fringe" ("2020-12-27 00:12:39" ("emacs") (:type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe" :package "vi-tilde-fringe" :local-repo "vi-tilde-fringe")) "persp-mode" ("2020-12-27 00:12:40" ("emacs") (:type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el" :package "persp-mode" :local-repo "persp-mode.el")) "evil-args" ("2020-12-27 00:12:40" ("evil") (:type git :flavor melpa :host github :repo "wcsmith/evil-args" :package "evil-args" :local-repo "evil-args")) "evil-easymotion" ("2020-12-27 00:12:40" ("emacs" "avy" "cl-lib") (:type git :flavor melpa :host github :repo "PythonNut/evil-easymotion" :package "evil-easymotion" :local-repo "evil-easymotion")) "evil-embrace" ("2020-12-27 00:12:40" ("emacs" "embrace" "evil-surround") (:type git :flavor melpa :host github :repo "cute-jumper/evil-embrace.el" :package "evil-embrace" :local-repo "evil-embrace.el")) "embrace" ("2020-12-27 00:12:40" ("cl-lib" "expand-region") (:type git :flavor melpa :host github :repo "cute-jumper/embrace.el" :package "embrace" :local-repo "embrace.el")) "expand-region" ("2020-12-27 00:12:40" nil (:type git :flavor melpa :host github :repo "magnars/expand-region.el" :package "expand-region" :local-repo "expand-region.el")) "evil-surround" ("2020-12-27 00:12:40" ("evil") (:type git :flavor melpa :host github :repo "emacs-evil/evil-surround" :package "evil-surround" :local-repo "evil-surround")) "evil-escape" ("2020-12-27 00:12:40" ("emacs" "evil" "cl-lib") (:host github :repo "hlissner/evil-escape" :flavor melpa :package "evil-escape" :type git :local-repo "evil-escape")) "evil-exchange" ("2020-12-27 00:12:40" ("evil" "cl-lib") (:type git :flavor melpa :host github :repo "Dewdrops/evil-exchange" :package "evil-exchange" :local-repo "evil-exchange")) "evil-indent-plus" ("2020-12-27 00:12:40" ("evil" "cl-lib") (:type git :flavor melpa :host github :repo "TheBB/evil-indent-plus" :package "evil-indent-plus" :local-repo "evil-indent-plus")) "evil-lion" ("2020-12-27 00:12:40" ("emacs" "evil") (:type git :flavor melpa :files ("evil-lion.el" "evil-lion-pkg.el") :host github :repo "edkolev/evil-lion" :package "evil-lion" :local-repo "evil-lion")) "evil-nerd-commenter" ("2020-12-27 00:12:40" ("emacs") (:type git :flavor melpa :host github :repo "redguardtoo/evil-nerd-commenter" :package "evil-nerd-commenter" :local-repo "evil-nerd-commenter")) "evil-numbers" ("2020-12-27 00:12:40" nil (:host github :repo "janpath/evil-numbers" :flavor melpa :package "evil-numbers" :type git :local-repo "evil-numbers")) "evil-snipe" ("2020-12-27 00:12:40" ("emacs" "evil" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/evil-snipe" :package "evil-snipe" :local-repo "evil-snipe")) "evil-textobj-anyblock" ("2020-12-27 00:12:40" ("cl-lib" "evil") (:type git :flavor melpa :host github :repo "noctuid/evil-textobj-anyblock" :package "evil-textobj-anyblock" :local-repo "evil-textobj-anyblock")) "evil-traces" ("2020-12-27 00:12:40" ("emacs" "evil") (:type git :flavor melpa :host github :repo "mamapanda/evil-traces" :package "evil-traces" :local-repo "evil-traces")) "evil-visualstar" ("2020-12-27 00:12:40" ("evil") (:type git :flavor melpa :host github :repo "bling/evil-visualstar" :package "evil-visualstar" :local-repo "evil-visualstar")) "exato" ("2020-12-27 00:12:40" ("evil" "emacs") (:type git :flavor melpa :host github :repo "ninrod/exato" :package "exato" :local-repo "exato")) "evil-quick-diff" ("2020-12-27 00:12:40" ("evil" "cl-lib") (:host github :repo "rgrinberg/evil-quick-diff" :package "evil-quick-diff" :type git :local-repo "evil-quick-diff")) "evil-collection" ("2020-12-27 00:12:40" ("emacs" "evil" "annalist") (:type git :flavor melpa :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection" :package "evil-collection" :local-repo "evil-collection")) "annalist" ("2020-12-27 00:12:40" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/annalist.el" :package "annalist" :local-repo "annalist.el")) "yasnippet" ("2020-12-27 00:12:40" ("cl-lib") (:type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet" :package "yasnippet" :local-repo "yasnippet")) "vimish-fold" ("2020-12-27 00:12:40" ("emacs" "cl-lib" "f") (:type git :flavor melpa :host github :repo "matsievskiysv/vimish-fold" :package "vimish-fold" :local-repo "vimish-fold")) "evil-vimish-fold" ("2020-12-27 00:12:40" ("emacs" "evil" "vimish-fold") (:type git :flavor melpa :host github :repo "alexmurray/evil-vimish-fold" :package "evil-vimish-fold" :local-repo "evil-vimish-fold")) "auto-yasnippet" ("2020-12-27 00:12:40" ("yasnippet") (:type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet" :package "auto-yasnippet" :local-repo "auto-yasnippet")) "doom-snippets" ("2020-12-27 00:12:40" ("emacs" "cl-lib" "yasnippet") (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*") :package "doom-snippets" :type git :local-repo "doom-snippets")) "diredfl" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "purcell/diredfl" :package "diredfl" :local-repo "diredfl")) "dired-git-info" ("2020-12-27 00:12:41" ("emacs") (:type git :host github :repo "emacs-straight/dired-git-info" :files ("*" (:exclude ".git")) :package "dired-git-info" :local-repo "dired-git-info")) "diff-hl" ("2020-12-27 00:12:41" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "dgutov/diff-hl" :package "diff-hl" :local-repo "diff-hl")) "dired-rsync" ("2020-12-27 00:12:41" ("s" "dash" "emacs") (:type git :flavor melpa :host github :repo "stsquad/dired-rsync" :package "dired-rsync" :local-repo "dired-rsync")) "fd-dired" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "yqrashawn/fd-dired" :package "fd-dired" :local-repo "fd-dired")) "undo-fu" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu" :package "undo-fu" :local-repo "emacs-undo-fu")) "undo-fu-session" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu-session" :package "undo-fu-session" :local-repo "emacs-undo-fu-session")) "browse-at-remote" ("2020-12-27 00:12:41" ("f" "s" "cl-lib") (:type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote" :package "browse-at-remote" :local-repo "browse-at-remote")) "git-commit" ("2020-12-27 00:12:41" ("emacs" "dash" "transient" "with-editor") (:type git :flavor melpa :files ("lisp/git-commit.el" "git-commit-pkg.el") :host github :repo "magit/magit" :package "git-commit" :local-repo "magit")) "transient" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :files ("lisp/*.el" "docs/transient.texi" "transient-pkg.el") :host github :repo "magit/transient" :package "transient" :local-repo "transient")) "with-editor" ("2020-12-27 00:12:41" ("emacs" "async") (:type git :flavor melpa :host github :repo "magit/with-editor" :package "with-editor" :local-repo "with-editor")) "async" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "jwiegley/emacs-async" :package "async" :local-repo "emacs-async")) "git-timemachine" ("2020-12-27 00:12:41" ("emacs" "transient") (:type git :flavor melpa :host gitlab :repo "pidu/git-timemachine" :package "git-timemachine" :local-repo "git-timemachine")) "gitconfig-mode" ("2020-12-27 00:12:41" nil (:type git :flavor melpa :files ("gitconfig-mode.el" "gitconfig-mode-pkg.el") :host github :repo "magit/git-modes" :package "gitconfig-mode" :local-repo "git-modes")) "gitignore-mode" ("2020-12-27 00:12:41" nil (:flavor melpa :files ("gitignore-mode.el" "gitignore-mode-pkg.el") :package "gitignore-mode" :local-repo "git-modes" :type git :repo "magit/git-modes" :host github)) "flycheck" ("2020-12-27 00:12:41" ("dash" "pkg-info" "let-alist" "seq" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck" :package "flycheck" :local-repo "flycheck")) "flycheck-popup-tip" ("2020-12-27 00:12:41" ("flycheck" "popup" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip" :package "flycheck-popup-tip" :local-repo "flycheck-popup-tip")) "popup" ("2020-12-27 00:12:41" ("cl-lib") (:type git :flavor melpa :files ("popup.el" "popup-pkg.el") :host github :repo "auto-complete/popup-el" :package "popup" :local-repo "popup-el")) "quickrun" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/quickrun" :package "quickrun" :local-repo "quickrun")) "eros" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "xiongtx/eros" :package "eros" :local-repo "eros")) "dumb-jump" ("2020-12-27 00:12:41" ("emacs" "s" "dash" "popup") (:type git :flavor melpa :host github :repo "jacktasia/dumb-jump" :package "dumb-jump" :local-repo "dumb-jump")) "ivy-xref" ("2020-12-27 00:12:41" ("emacs" "ivy") (:type git :flavor melpa :host github :repo "alexmurray/ivy-xref" :package "ivy-xref" :local-repo "ivy-xref")) "request" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request" :package "request" :local-repo "emacs-request")) "magit" ("2020-12-27 00:12:41" ("emacs" "async" "dash" "git-commit" "transient" "with-editor") (:flavor melpa :files ("lisp/magit" "lisp/magit*.el" "lisp/git-rebase.el" "Documentation/magit.texi" "Documentation/AUTHORS.md" "LICENSE" (:exclude "lisp/magit-libgit.el") "magit-pkg.el") :package "magit" :local-repo "magit" :type git :repo "magit/magit" :host github)) "magit-gitflow" ("2020-12-27 00:12:41" ("magit" "magit-popup") (:type git :flavor melpa :host github :repo "jtatarik/magit-gitflow" :package "magit-gitflow" :local-repo "magit-gitflow")) "magit-popup" ("2020-12-27 00:12:41" ("emacs" "dash") (:type git :flavor melpa :host github :repo "magit/magit-popup" :package "magit-popup" :local-repo "magit-popup")) "magit-todos" ("2020-12-27 00:12:42" ("emacs" "async" "dash" "f" "hl-todo" "magit" "pcre2el" "s") (:type git :flavor melpa :host github :repo "alphapapa/magit-todos" :package "magit-todos" :local-repo "magit-todos")) "github-review" ("2020-12-27 00:12:42" ("emacs" "s" "ghub" "dash" "deferred" "a") (:type git :flavor melpa :host github :repo "charignon/github-review" :package "github-review" :local-repo "github-review")) "ghub" ("2020-12-27 00:12:42" ("emacs" "let-alist" "treepy") (:type git :flavor melpa :host github :repo "magit/ghub" :package "ghub" :local-repo "ghub")) "treepy" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :host github :repo "volrath/treepy.el" :package "treepy" :local-repo "treepy.el")) "deferred" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred" :package "deferred" :local-repo "emacs-deferred")) "a" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :host github :repo "plexus/a.el" :package "a" :local-repo "a.el")) "highlight-quoted" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/highlight-quoted" :package "highlight-quoted" :local-repo "highlight-quoted")) "macrostep" ("2020-12-27 00:12:42" ("cl-lib") (:type git :flavor melpa :host github :repo "joddie/macrostep" :package "macrostep" :local-repo "macrostep")) "overseer" ("2020-12-27 00:12:42" ("emacs" "dash" "pkg-info" "f") (:type git :flavor melpa :host github :repo "tonini/overseer.el" :package "overseer" :local-repo "overseer.el")) "elisp-def" ("2020-12-27 00:12:42" ("dash" "f" "s" "emacs") (:type git :flavor melpa :host github :repo "Wilfred/elisp-def" :package "elisp-def" :local-repo "elisp-def")) "elisp-demos" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos" :package "elisp-demos" :local-repo "elisp-demos")) "flycheck-cask" ("2020-12-27 00:12:42" ("emacs" "flycheck" "dash") (:type git :flavor melpa :host github :repo "flycheck/flycheck-cask" :package "flycheck-cask" :local-repo "flycheck-cask")) "buttercup" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup" :package "buttercup" :local-repo "emacs-buttercup")) "markdown-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "jrblevin/markdown-mode" :package "markdown-mode" :local-repo "markdown-mode")) "markdown-toc" ("2020-12-27 00:12:43" ("s" "dash" "markdown-mode") (:type git :flavor melpa :host github :repo "ardumont/markdown-toc" :package "markdown-toc" :local-repo "markdown-toc")) "edit-indirect" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/edit-indirect" :package "edit-indirect" :local-repo "edit-indirect")) "evil-markdown" ("2020-12-27 00:12:43" nil (:host github :repo "Somelauw/evil-markdown" :package "evil-markdown" :type git :local-repo "evil-markdown")) "org-mode" ("2020-12-27 00:12:43" nil (:host github :repo "emacs-straight/org-mode" :files ("*.el" "lisp/*.el" "contrib/lisp/*.el") :build (with-temp-file (expand-file-name "org-version.el" (straight--repos-dir "org-mode")) (insert "(fset 'org-release (lambda () \"9.5\"))
" "(fset 'org-git-version #'ignore)
" "(provide 'org-version)
")) :package "org-mode" :type git :local-repo "org-mode")) "htmlize" ("2020-12-27 00:12:43" nil (:type git :flavor melpa :host github :repo "hniksic/emacs-htmlize" :package "htmlize" :local-repo "emacs-htmlize")) "org-yt" ("2020-12-27 00:12:43" nil (:host github :repo "TobiasZawada/org-yt" :package "org-yt" :type git :local-repo "org-yt")) "ox-clip" ("2020-12-27 00:12:43" ("org" "htmlize") (:type git :flavor melpa :host github :repo "jkitchin/ox-clip" :package "ox-clip" :local-repo "ox-clip")) "org" ("2020-12-27 00:12:43" nil (:local-repo nil :build ("make" "oldorg" "EMACS=/usr/bin/emacs") :repo "https://code.orgmode.org/bzg/org-mode.git" :package "org" :type git)) "toc-org" ("2020-12-27 00:12:44" nil (:type git :flavor melpa :host github :repo "snosov1/toc-org" :package "toc-org" :local-repo "toc-org")) "org-cliplink" ("2020-12-27 00:12:44" ("emacs") (:type git :flavor melpa :host github :repo "rexim/org-cliplink" :package "org-cliplink" :local-repo "org-cliplink")) "evil-org" ("2020-12-27 00:12:44" ("emacs" "evil") (:host github :repo "hlissner/evil-org-mode" :flavor melpa :package "evil-org" :type git :local-repo "evil-org-mode")) "orgit" ("2020-12-27 00:12:44" ("emacs" "magit" "org") (:type git :flavor melpa :host github :repo "magit/orgit" :package "orgit" :local-repo "orgit")) "ob-async" ("2020-12-27 00:12:44" ("async" "org" "emacs" "dash") (:type git :flavor melpa :host github :repo "astahlman/ob-async" :package "ob-async" :local-repo "ob-async")) "company-shell" ("2020-12-27 00:12:44" ("emacs" "company" "dash" "cl-lib") (:type git :flavor melpa :files ("company-shell.el" "company-shell-pkg.el") :host github :repo "Alexander-Miller/company-shell" :package "company-shell" :local-repo "company-shell")) "drag-stuff" ("2020-12-27 00:12:44" nil (:type git :flavor melpa :host github :repo "rejeep/drag-stuff.el" :package "drag-stuff" :local-repo "drag-stuff.el")) "link-hint" ("2020-12-27 00:12:44" ("avy" "emacs") (:type git :flavor melpa :host github :repo "noctuid/link-hint.el" :package "link-hint" :local-repo "link-hint.el")) "multi-term" ("2020-12-27 00:12:41" nil (:type git :flavor melpa :host github :repo "manateelazycat/multi-term" :package "multi-term" :local-repo "multi-term")) "langtool" ("2020-12-27 00:12:41" ("cl-lib") (:type git :flavor melpa :files ("langtool.el" "langtool-pkg.el") :host github :repo "mhayashi1120/Emacs-langtool" :package "langtool" :local-repo "Emacs-langtool")) "writegood-mode" ("2020-12-27 00:12:41" nil (:type git :flavor melpa :host github :repo "bnbeckwith/writegood-mode" :package "writegood-mode" :local-repo "writegood-mode")) "ansible" ("2020-12-27 00:12:41" ("s" "f") (:nonrecursive t :files ("*.el" "snippets" "dict" "ansible-pkg.el") :flavor melpa :repo "k1LoW/emacs-ansible" :host github :package "ansible" :type git :local-repo "emacs-ansible")) "ansible-doc" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/ansible-doc" :package "ansible-doc" :local-repo "ansible-doc")) "jinja2-mode" ("2020-12-27 00:12:41" nil (:type git :flavor melpa :host github :repo "paradoxxxzero/jinja2-mode" :package "jinja2-mode" :local-repo "jinja2-mode")) "yaml-mode" ("2020-12-27 00:12:41" ("emacs") (:type git :flavor melpa :host github :repo "yoshiki/yaml-mode" :package "yaml-mode" :local-repo "yaml-mode")) "company-ansible" ("2020-12-27 00:12:41" ("emacs" "company") (:type git :flavor melpa :host github :repo "krzysztof-magosa/company-ansible" :package "company-ansible" :local-repo "company-ansible")) "realgud" ("2020-12-27 00:12:41" ("load-relative" "loc-changes" "test-simple" "emacs") (:type git :flavor melpa :files ("realgud.el" "realgud/.nosearch" "realgud-recursive-autoloads.el" ("realgud/common" "realgud/common/*.el") ("realgud/common/buffer" "realgud/common/buffer/*.el") ("realgud/debugger/bashdb" "realgud/debugger/bashdb/*.el") ("realgud/debugger/gdb" "realgud/debugger/gdb/*.el") ("realgud/debugger/gub" "realgud/debugger/gub/*.el") ("realgud/debugger/ipdb" "realgud/debugger/ipdb/*.el") ("realgud/debugger/jdb" "realgud/debugger/jdb/*.el") ("realgud/debugger/kshdb" "realgud/debugger/kshdb/*.el") ("realgud/debugger/nodejs" "realgud/debugger/nodejs/*.el") ("realgud/debugger/pdb" "realgud/debugger/pdb/*.el") ("realgud/debugger/perldb" "realgud/debugger/perldb/*.el") ("realgud/debugger/rdebug" "realgud/debugger/rdebug/*.el") ("realgud/debugger/remake" "realgud/debugger/remake/*.el") ("realgud/debugger/trepan" "realgud/debugger/trepan/*.el") ("realgud/debugger/trepan.pl" "realgud/debugger/trepan.pl/*.el") ("realgud/debugger/trepan2" "realgud/debugger/trepan2/*.el") ("realgud/debugger/trepan3k" "realgud/debugger/trepan3k/*.el") ("realgud/debugger/trepanjs" "realgud/debugger/trepanjs/*.el") ("realgud/debugger/zshdb" "realgud/debugger/zshdb/*.el") ("realgud/lang" "realgud/lang/*.el") "realgud-pkg.el") :host github :repo "realgud/realgud" :package "realgud" :local-repo "realgud")) "load-relative" ("2020-12-27 00:12:41" nil (:type git :flavor melpa :host github :repo "rocky/emacs-load-relative" :package "load-relative" :local-repo "emacs-load-relative")) "loc-changes" ("2020-12-27 00:12:41" nil (:type git :flavor melpa :files ("loc-changes.el" "loc-changes-pkg.el") :host github :repo "rocky/emacs-loc-changes" :package "loc-changes" :local-repo "emacs-loc-changes")) "test-simple" ("2020-12-27 00:12:41" ("cl-lib") (:type git :flavor melpa :host github :repo "rocky/emacs-test-simple" :package "test-simple" :local-repo "emacs-test-simple")) "realgud-trepan-ni" ("2020-12-27 00:12:41" ("load-relative" "realgud" "emacs") (:type git :flavor melpa :files (:defaults ("trepan-ni" "trepan-ni/*.el") "realgud-trepan-ni-pkg.el") :host github :repo "realgud/realgud-trepan-ni" :package "realgud-trepan-ni" :local-repo "realgud-trepan-ni")) "makefile-executor" ("2020-12-27 00:12:42" ("emacs" "dash" "f" "s") (:type git :flavor melpa :host github :repo "thiderman/makefile-executor.el" :package "makefile-executor" :local-repo "makefile-executor.el")) "xclip" ("2020-12-27 00:12:42" nil (:type git :host github :repo "emacs-straight/xclip" :files ("*" (:exclude ".git")) :package "xclip" :local-repo "xclip")) "evil-terminal-cursor-changer" ("2020-12-27 00:12:42" ("evil") (:host github :repo "kisaragi-hiu/evil-terminal-cursor-changer" :flavor melpa :package "evil-terminal-cursor-changer" :type git :local-repo "evil-terminal-cursor-changer")) "cmake-mode" ("2020-12-27 00:12:42" ("emacs") (:host github :repo "emacsmirror/cmake-mode" :files (:defaults "*") :flavor melpa :package "cmake-mode" :type git :local-repo "cmake-mode")) "cuda-mode" ("2020-12-27 00:12:42" nil (:type git :flavor melpa :host github :repo "chachi/cuda-mode" :package "cuda-mode" :local-repo "cuda-mode")) "demangle-mode" ("2020-12-27 00:12:42" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "liblit/demangle-mode" :package "demangle-mode" :local-repo "demangle-mode")) "disaster" ("2020-12-27 00:12:42" nil (:type git :flavor melpa :files ("disaster.el" "disaster-pkg.el") :host github :repo "jart/disaster" :package "disaster" :local-repo "disaster")) "modern-cpp-font-lock" ("2020-12-27 00:12:42" nil (:type git :flavor melpa :host github :repo "ludwigpacifici/modern-cpp-font-lock" :package "modern-cpp-font-lock" :local-repo "modern-cpp-font-lock")) "opencl-mode" ("2020-12-27 00:12:42" nil (:type git :flavor melpa :host github :repo "salmanebah/opencl-mode" :package "opencl-mode" :local-repo "opencl-mode")) "glsl-mode" ("2020-12-27 00:12:42" nil (:type git :flavor melpa :host github :repo "jimhourihan/glsl-mode" :package "glsl-mode" :local-repo "glsl-mode")) "company-glsl" ("2020-12-27 00:12:42" ("company") (:host github :repo "Kaali/company-glsl" :flavor melpa :package "company-glsl" :type git :local-repo "company-glsl")) "irony" ("2020-12-27 00:12:42" ("cl-lib" "json") (:type git :flavor melpa :files ("*.el" "server" "irony-pkg.el") :host github :repo "Sarcasm/irony-mode" :package "irony" :local-repo "irony-mode")) "irony-eldoc" ("2020-12-27 00:12:42" ("emacs" "cl-lib" "irony") (:type git :flavor melpa :host github :repo "ikirill/irony-eldoc" :package "irony-eldoc" :local-repo "irony-eldoc")) "flycheck-irony" ("2020-12-27 00:12:42" ("emacs" "flycheck" "irony") (:type git :flavor melpa :host github :repo "Sarcasm/flycheck-irony" :package "flycheck-irony" :local-repo "flycheck-irony")) "company-irony" ("2020-12-27 00:12:42" ("emacs" "company" "irony" "cl-lib") (:type git :flavor melpa :host github :repo "Sarcasm/company-irony" :package "company-irony" :local-repo "company-irony")) "company-irony-c-headers" ("2020-12-27 00:12:42" ("cl-lib" "company" "irony") (:type git :flavor melpa :host github :repo "hotpxl/company-irony-c-headers" :package "company-irony-c-headers" :local-repo "company-irony-c-headers")) "rtags" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files ("src/rtags.el" "rtags-pkg.el") :host github :repo "Andersbakken/rtags" :package "rtags" :local-repo "rtags")) "ivy-rtags" ("2020-12-27 00:12:42" ("ivy" "rtags") (:flavor melpa :files ("src/ivy-rtags.el" "ivy-rtags-pkg.el") :package "ivy-rtags" :local-repo "rtags" :type git :repo "Andersbakken/rtags" :host github)) "crystal-mode" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files ("crystal-mode.el" "crystal-mode-pkg.el") :host github :repo "crystal-lang-tools/emacs-crystal-mode" :package "crystal-mode" :local-repo "emacs-crystal-mode")) "inf-crystal" ("2020-12-27 00:12:42" ("emacs" "crystal-mode") (:type git :flavor melpa :host github :repo "brantou/inf-crystal.el" :package "inf-crystal" :local-repo "inf-crystal.el")) "flycheck-crystal" ("2020-12-27 00:12:42" ("flycheck") (:flavor melpa :files ("flycheck-crystal.el" "flycheck-crystal-pkg.el") :package "flycheck-crystal" :local-repo "emacs-crystal-mode" :type git :repo "crystal-lang-tools/emacs-crystal-mode" :host github)) "flycheck-ameba" ("2020-12-27 00:12:42" ("emacs" "flycheck") (:type git :flavor melpa :files ("flycheck-ameba.el" "flycheck-ameba-pkg.el") :host github :repo "crystal-ameba/ameba.el" :package "flycheck-ameba" :local-repo "ameba.el")) "csharp-mode" ("2020-12-27 00:12:42" nil (:type git :flavor melpa :host github :repo "josteink/csharp-mode" :package "csharp-mode" :local-repo "csharp-mode")) "csproj-mode" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files (:defaults "snippets" "csproj-mode-pkg.el") :host github :repo "omajid/csproj-mode" :package "csproj-mode" :local-repo "csproj-mode")) "omnisharp" ("2020-12-27 00:12:42" ("emacs" "flycheck" "dash" "auto-complete" "popup" "csharp-mode" "cl-lib" "s" "f") (:type git :flavor melpa :branch "master" :host github :repo "OmniSharp/omnisharp-emacs" :package "omnisharp" :local-repo "omnisharp-emacs")) "auto-complete" ("2020-12-27 00:12:42" ("popup" "cl-lib") (:type git :flavor melpa :files ("*.el" "dict" "auto-complete-pkg.el") :host github :repo "auto-complete/auto-complete" :package "auto-complete" :local-repo "auto-complete")) "csv-mode" ("2020-12-27 00:12:42" ("emacs" "cl-lib") (:type git :host github :repo "emacs-straight/csv-mode" :files ("*" (:exclude ".git")) :package "csv-mode" :local-repo "csv-mode")) "elixir-mode" ("2020-12-27 00:12:42" ("emacs" "pkg-info") (:type git :flavor melpa :host github :repo "elixir-editors/emacs-elixir" :package "elixir-mode" :local-repo "emacs-elixir")) "alchemist" ("2020-12-27 00:12:42" ("elixir-mode" "dash" "emacs" "company" "pkg-info" "s") (:type git :flavor melpa :files (:defaults "*.exs" "alchemist-server" "alchemist-pkg.el") :host github :repo "tonini/alchemist.el" :package "alchemist" :local-repo "alchemist.el")) "exunit" ("2020-12-27 00:12:42" ("s" "emacs" "f") (:type git :flavor melpa :host github :repo "ananthakumaran/exunit.el" :package "exunit" :local-repo "exunit.el")) "flycheck-credo" ("2020-12-27 00:12:42" ("flycheck") (:type git :flavor melpa :host github :repo "aaronjensen/flycheck-credo" :package "flycheck-credo" :local-repo "flycheck-credo")) "elm-mode" ("2020-12-27 00:12:42" ("f" "s" "emacs" "dash" "reformatter") (:type git :flavor melpa :files (:defaults "elm.tags" "elm-mode-pkg.el") :host github :repo "jcollard/elm-mode" :package "elm-mode" :local-repo "elm-mode")) "reformatter" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :host github :repo "purcell/reformatter.el" :package "reformatter" :local-repo "reformatter.el")) "flycheck-elm" ("2020-12-27 00:12:42" ("flycheck" "emacs" "let-alist" "seq") (:type git :flavor melpa :host github :repo "bsermons/flycheck-elm" :package "flycheck-elm" :local-repo "flycheck-elm")) "erlang" ("2020-12-27 00:12:42" ("emacs") (:type git :flavor melpa :files ("lib/tools/emacs/*.el" (:exclude "lib/tools/emacs/erlang_appwiz.el") "erlang-pkg.el") :host github :repo "erlang/otp" :package "erlang" :local-repo "otp")) "company-erlang" ("2020-12-27 00:12:43" ("emacs" "ivy-erlang-complete" "company") (:type git :flavor melpa :files (:defaults "company-erlang-pkg.el") :host github :repo "s-kostyaev/company-erlang" :package "company-erlang" :local-repo "company-erlang")) "ivy-erlang-complete" ("2020-12-27 00:12:43" ("async" "counsel" "ivy" "erlang" "emacs") (:type git :flavor melpa :files (:defaults "bin" "ivy-erlang-complete-pkg.el") :host github :repo "s-kostyaev/ivy-erlang-complete" :package "ivy-erlang-complete" :local-repo "ivy-erlang-complete")) "gdscript-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "godotengine/emacs-gdscript-mode" :package "gdscript-mode" :local-repo "emacs-gdscript-mode")) "go-eldoc" ("2020-12-27 00:12:43" ("emacs" "go-mode") (:type git :flavor melpa :host github :repo "emacsorphanage/go-eldoc" :package "go-eldoc" :local-repo "go-eldoc")) "go-mode" ("2020-12-27 00:12:43" nil (:flavor melpa :files ("go-mode.el" "go-mode-pkg.el") :package "go-mode" :local-repo "go-mode.el" :type git :repo "dominikh/go-mode.el" :host github)) "go-guru" ("2020-12-27 00:12:43" ("go-mode" "cl-lib") (:type git :flavor melpa :files ("go-guru.el" "go-guru-pkg.el") :host github :repo "dominikh/go-mode.el" :package "go-guru" :local-repo "go-mode.el")) "gorepl-mode" ("2020-12-27 00:12:43" ("emacs" "s" "f" "hydra") (:type git :flavor melpa :host github :repo "manute/gorepl-mode" :package "gorepl-mode" :local-repo "gorepl-mode")) "go-tag" ("2020-12-27 00:12:43" ("emacs" "go-mode") (:type git :flavor melpa :host github :repo "brantou/emacs-go-tag" :package "go-tag" :local-repo "emacs-go-tag")) "go-gen-test" ("2020-12-27 00:12:43" ("emacs" "s") (:type git :flavor melpa :files (:defaults "go-gen-test.el" "go-gen-test-pkg.el") :host github :repo "s-kostyaev/go-gen-test" :package "go-gen-test" :local-repo "go-gen-test")) "company-go" ("2020-12-27 00:12:43" ("company" "go-mode") (:type git :flavor melpa :files ("emacs-company/company-go.el" "company-go-pkg.el") :host github :repo "mdempsky/gocode" :package "company-go" :local-repo "gocode")) "flycheck-golangci-lint" ("2020-12-27 00:12:43" ("emacs" "flycheck") (:type git :flavor melpa :host github :repo "weijiangan/flycheck-golangci-lint" :package "flycheck-golangci-lint" :local-repo "flycheck-golangci-lint")) "haskell-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :files (:defaults "NEWS" "logo.svg" "haskell-mode-pkg.el") :host github :repo "haskell/haskell-mode" :package "haskell-mode" :local-repo "haskell-mode")) "dante" ("2020-12-27 00:12:43" ("dash" "emacs" "f" "flycheck" "company" "haskell-mode" "s" "lcr") (:type git :flavor melpa :host github :repo "jyp/dante" :package "dante" :local-repo "dante")) "lcr" ("2020-12-27 00:12:43" ("dash" "emacs") (:type git :flavor melpa :host github :repo "jyp/lcr" :package "lcr" :local-repo "lcr")) "attrap" ("2020-12-27 00:12:43" ("dash" "emacs" "f" "flycheck" "s") (:type git :flavor melpa :host github :repo "jyp/attrap" :package "attrap" :local-repo "attrap")) "json-mode" ("2020-12-27 00:12:43" ("json-reformat" "json-snatcher") (:type git :flavor melpa :host github :repo "joshwnj/json-mode" :package "json-mode" :local-repo "json-mode")) "json-reformat" ("2020-12-27 00:12:43" nil (:type git :flavor melpa :host github :repo "gongo/json-reformat" :package "json-reformat" :local-repo "json-reformat")) "json-snatcher" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "Sterlingg/json-snatcher" :package "json-snatcher" :local-repo "json-snatcher")) "counsel-jq" ("2020-12-27 00:12:43" nil (:type git :flavor melpa :host github :repo "200ok-ch/counsel-jq" :package "counsel-jq" :local-repo "counsel-jq")) "coffee-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "defunkt/coffee-mode" :package "coffee-mode" :local-repo "coffee-mode")) "js2-mode" ("2020-12-27 00:12:43" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "mooz/js2-mode" :package "js2-mode" :local-repo "js2-mode")) "rjsx-mode" ("2020-12-27 00:12:43" ("emacs" "js2-mode") (:type git :flavor melpa :host github :repo "felipeochoa/rjsx-mode" :package "rjsx-mode" :local-repo "rjsx-mode")) "typescript-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "emacs-typescript/typescript.el" :package "typescript-mode" :local-repo "typescript.el")) "js2-refactor" ("2020-12-27 00:12:43" ("js2-mode" "s" "multiple-cursors" "dash" "s" "yasnippet") (:type git :flavor melpa :host github :repo "magnars/js2-refactor.el" :package "js2-refactor" :local-repo "js2-refactor.el")) "multiple-cursors" ("2020-12-27 00:12:43" ("cl-lib") (:type git :flavor melpa :host github :repo "magnars/multiple-cursors.el" :package "multiple-cursors" :local-repo "multiple-cursors.el")) "npm-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :host github :repo "mojochao/npm-mode" :package "npm-mode" :local-repo "npm-mode")) "add-node-modules-path" ("2020-12-27 00:12:43" nil (:type git :flavor melpa :host github :repo "codesuki/add-node-modules-path" :package "add-node-modules-path" :local-repo "add-node-modules-path")) "nodejs-repl" ("2020-12-27 00:12:43" nil (:type git :flavor melpa :host github :repo "abicky/nodejs-repl.el" :package "nodejs-repl" :local-repo "nodejs-repl.el")) "skewer-mode" ("2020-12-27 00:12:43" ("simple-httpd" "js2-mode" "emacs") (:type git :flavor melpa :files ("*.html" "*.js" "*.el" "skewer-mode-pkg.el") :host github :repo "skeeto/skewer-mode" :package "skewer-mode" :local-repo "skewer-mode")) "simple-httpd" ("2020-12-27 00:12:43" ("cl-lib") (:type git :flavor melpa :host github :repo "skeeto/emacs-web-server" :package "simple-httpd" :local-repo "emacs-web-server")) "tide" ("2020-12-27 00:12:43" ("emacs" "dash" "s" "flycheck" "typescript-mode" "cl-lib") (:type git :flavor melpa :files (:defaults "tsserver" "tide-pkg.el") :host github :repo "ananthakumaran/tide" :package "tide" :local-repo "tide")) "xref-js2" ("2020-12-27 00:12:43" ("emacs" "js2-mode") (:type git :flavor melpa :host github :repo "NicolasPetton/xref-js2" :package "xref-js2" :local-repo "xref-js2")) "lua-mode" ("2020-12-27 00:12:43" ("emacs") (:type git :flavor melpa :files (:defaults "scripts" "lua-mode-pkg.el") :host github :repo "immerrr/lua-mode" :package "lua-mode" :local-repo "lua-mode")) "company-lua" ("2020-12-27 00:12:43" ("company" "s" "f" "lua-mode") (:type git :flavor melpa :files (:defaults "lua" "company-lua-pkg.el") :host github :repo "ptrv/company-lua" :package "company-lua" :local-repo "company-lua")) "nim-mode" ("2020-12-27 00:12:43" ("emacs" "epc" "let-alist" "commenter" "flycheck-nimsuggest") (:type git :flavor melpa :host github :repo "nim-lang/nim-mode" :package "nim-mode" :local-repo "nim-mode")) "epc" ("2020-12-27 00:12:43" ("concurrent" "ctable") (:type git :flavor melpa :files ("epc.el" "epcs.el" "epc-pkg.el") :host github :repo "kiwanami/emacs-epc" :package "epc" :local-repo "emacs-epc")) "concurrent" ("2020-12-27 00:12:43" ("emacs" "deferred") (:flavor melpa :files ("concurrent.el" "concurrent-pkg.el") :package "concurrent" :local-repo "emacs-deferred" :type git :repo "kiwanami/emacs-deferred" :host github)) "ctable" ("2020-12-27 00:12:43" nil (:type git :flavor melpa :files ("ctable.el" "ctable-pkg.el") :host github :repo "kiwanami/emacs-ctable" :package "ctable" :local-repo "emacs-ctable")) "commenter" ("2020-12-27 00:12:43" ("emacs" "let-alist") (:type git :flavor melpa :host github :repo "yuutayamada/commenter" :package "commenter" :local-repo "commenter")) "flycheck-nimsuggest" ("2020-12-27 00:12:43" ("flycheck" "emacs") (:type git :flavor melpa :host github :repo "yuutayamada/flycheck-nimsuggest" :package "flycheck-nimsuggest" :local-repo "flycheck-nimsuggest")) "flycheck-nim" ("2020-12-27 00:12:43" ("dash" "flycheck") (:type git :flavor melpa :host github :repo "ALSchwalm/flycheck-nim" :package "flycheck-nim" :local-repo "flycheck-nim")) "ob-crystal" ("2020-12-27 00:12:44" ("emacs") (:type git :flavor melpa :host github :repo "brantou/ob-crystal" :package "ob-crystal" :local-repo "ob-crystal")) "ob-go" ("2020-12-27 00:12:44" nil (:type git :flavor melpa :host github :repo "pope/ob-go" :package "ob-go" :local-repo "ob-go")) "ob-nim" ("2020-12-27 00:12:44" ("cl-lib") (:type git :flavor melpa :host github :repo "Lompik/ob-nim" :package "ob-nim" :local-repo "ob-nim")) "pip-requirements" ("2020-12-27 00:12:44" ("dash") (:type git :flavor melpa :host github :repo "Wilfred/pip-requirements.el" :package "pip-requirements" :local-repo "pip-requirements.el")) "anaconda-mode" ("2020-12-27 00:12:44" ("emacs" "pythonic" "dash" "s" "f") (:type git :flavor melpa :host github :repo "pythonic-emacs/anaconda-mode" :package "anaconda-mode" :local-repo "anaconda-mode")) "pythonic" ("2020-12-27 00:12:44" ("emacs" "s" "f") (:type git :flavor melpa :host github :repo "pythonic-emacs/pythonic" :package "pythonic" :local-repo "pythonic")) "company-anaconda" ("2020-12-27 00:12:44" ("company" "anaconda-mode" "cl-lib" "dash" "s") (:type git :flavor melpa :host github :repo "pythonic-emacs/company-anaconda" :package "company-anaconda" :local-repo "company-anaconda")) "pipenv" ("2020-12-27 00:12:44" ("emacs" "f" "s" "pyvenv") (:type git :flavor melpa :host github :repo "pwalsh/pipenv.el" :package "pipenv" :local-repo "pipenv.el")) "pyvenv" ("2020-12-27 00:12:44" nil (:type git :flavor melpa :host github :repo "jorgenschaefer/pyvenv" :package "pyvenv" :local-repo "pyvenv")) "nose" ("2020-12-27 00:12:44" nil (:host github :repo "emacsattic/nose" :package "nose" :type git :local-repo "nose")) "python-pytest" ("2020-12-27 00:12:44" ("emacs" "dash" "dash-functional" "transient" "projectile" "s") (:type git :flavor melpa :host github :repo "wbolster/emacs-python-pytest" :package "python-pytest" :local-repo "emacs-python-pytest")) "pyimport" ("2020-12-27 00:12:44" ("dash" "s" "shut-up") (:type git :flavor melpa :host github :repo "Wilfred/pyimport" :package "pyimport" :local-repo "pyimport")) "shut-up" ("2020-12-27 00:12:44" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "cask/shut-up" :package "shut-up" :local-repo "shut-up")) "py-isort" ("2020-12-27 00:12:44" nil (:type git :flavor melpa :host github :repo "paetzke/py-isort.el" :package "py-isort" :local-repo "py-isort.el"))))

#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())

#s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (org-elpa #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "auto-minor-mode" nil "gcmh" nil "explain-pause-mode" nil "straight" nil "use-package" nil "all-the-icons" nil "hide-mode-line" nil "highlight-numbers" nil "rainbow-delimiters" nil "restart-emacs" nil "better-jumper" nil "dtrt-indent" nil "helpful" nil "pcre2el" nil "smartparens" nil "ws-butler" nil "projectile" nil "general" nil "which-key" nil "company" nil "company-dict" nil "swiper" nil "amx" nil "counsel-projectile" nil "ivy-rich" nil "wgrep" nil "doom-themes" nil "solaire-mode" nil "hl-todo" nil "doom-modeline" nil "anzu" nil "evil-anzu" nil "evil-goggles" nil "git-gutter-fringe" nil "vi-tilde-fringe" nil "persp-mode" nil "evil" nil "evil-args" nil "evil-easymotion" nil "evil-embrace" nil "evil-escape" nil "evil-exchange" nil "evil-indent-plus" nil "evil-lion" nil "evil-nerd-commenter" nil "evil-numbers" nil "evil-snipe" nil "evil-surround" nil "evil-textobj-anyblock" nil "evil-traces" nil "evil-visualstar" nil "exato" nil "evil-quick-diff" nil "evil-collection" nil "yasnippet" nil "vimish-fold" nil "evil-vimish-fold" nil "auto-yasnippet" nil "doom-snippets" nil "diredfl" nil "dired-git-info" nil "diff-hl" nil "dired-rsync" nil "fd-dired" nil "undo-fu" nil "undo-fu-session" nil "browse-at-remote" nil "git-commit" nil "git-timemachine" nil "gitconfig-mode" nil "gitignore-mode" nil "multi-term" nil "flycheck" nil "flycheck-popup-tip" nil "langtool" nil "writegood-mode" nil "ansible" nil "ansible-doc" nil "jinja2-mode" nil "yaml-mode" nil "company-ansible" nil "realgud" nil "realgud-trepan-ni" nil "quickrun" nil "eros" nil "dumb-jump" nil "ivy-xref" nil "request" nil "magit" nil "magit-gitflow" nil "magit-todos" nil "github-review" nil "makefile-executor" nil "xclip" nil "evil-terminal-cursor-changer" nil "cmake-mode" nil "cuda-mode" nil "demangle-mode" nil "disaster" nil "modern-cpp-font-lock" nil "opencl-mode" nil "glsl-mode" nil "company-glsl" nil "irony" nil "irony-eldoc" nil "flycheck-irony" nil "company-irony" nil "company-irony-c-headers" nil "rtags" nil "crystal-mode" nil "inf-crystal" nil "flycheck-crystal" nil "flycheck-ameba" nil "csharp-mode" nil "csproj-mode" nil "omnisharp" nil "csv-mode" nil "elixir-mode" nil "alchemist" nil "exunit" nil "flycheck-credo" nil "elm-mode" nil "flycheck-elm" nil "highlight-quoted" nil "macrostep" nil "overseer" nil "elisp-def" nil "elisp-demos" nil "flycheck-cask" nil "buttercup" nil "erlang" nil "company-erlang" nil "gdscript-mode" nil "go-eldoc" nil "go-guru" nil "go-mode" nil "gorepl-mode" nil "go-tag" nil "go-gen-test" nil "company-go" nil "flycheck-golangci-lint" nil "haskell-mode" nil "dante" nil "attrap" nil "json-mode" nil "json-snatcher" nil "counsel-jq" nil "coffee-mode" nil "js2-mode" nil "rjsx-mode" nil "typescript-mode" nil "js2-refactor" nil "npm-mode" nil "add-node-modules-path" nil "nodejs-repl" nil "skewer-mode" nil "tide" nil "xref-js2" nil "lua-mode" nil "company-lua" nil "markdown-mode" nil "markdown-toc" nil "edit-indirect" nil "evil-markdown" nil "nim-mode" nil "flycheck-nim" nil "org-mode" nil "avy" nil "htmlize" nil "org-yt" nil "ox-clip" nil "toc-org" nil "org-cliplink" nil "evil-org" nil "orgit" nil "ob-async" nil "ob-crystal" nil "ob-go" nil "ob-nim" nil "pip-requirements" nil "anaconda-mode" nil "company-anaconda" nil "pipenv" nil "pyvenv" nil "nose" nil "python-pytest" nil "pyimport" nil "py-isort" nil "company-shell" nil "drag-stuff" nil "link-hint" nil "seq" nil "popup" nil "load-relative" nil "loc-changes" nil "test-simple" nil "magit-popup" nil "ghub" nil "treepy" nil "deferred" nil "a" nil "json" nil "auto-complete" nil "reformatter" nil "ivy-erlang-complete" nil "lcr" nil "json-reformat" nil "multiple-cursors" nil "simple-httpd" nil "epc" nil "concurrent" nil "ctable" nil "commenter" nil "flycheck-nimsuggest" nil "org" `(org :type git :repo "https://code.orgmode.org/bzg/org-mode.git" :local-repo "org" :build ,(let ((make (if (eq system-type 'berkeley-unix) "gmake" "make")) (emacs (concat "EMACS=" invocation-directory invocation-name))) `(,make "oldorg" ,emacs))) "pythonic" nil "shut-up" nil)) melpa #s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "auto-minor-mode" (auto-minor-mode :type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode") "gcmh" (gcmh :type git :flavor melpa :host gitlab :repo "koral/gcmh") "explain-pause-mode" nil "straight" nil "use-package" (use-package :type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package") "all-the-icons" (all-the-icons :type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el") "hide-mode-line" (hide-mode-line :type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line") "highlight-numbers" (highlight-numbers :type git :flavor melpa :host github :repo "Fanael/highlight-numbers") "rainbow-delimiters" (rainbow-delimiters :type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters") "restart-emacs" (restart-emacs :type git :flavor melpa :host github :repo "iqbalansari/restart-emacs") "better-jumper" (better-jumper :type git :flavor melpa :host github :repo "gilbertw1/better-jumper") "dtrt-indent" (dtrt-indent :type git :flavor melpa :host github :repo "jscheid/dtrt-indent") "helpful" (helpful :type git :flavor melpa :host github :repo "Wilfred/helpful") "pcre2el" (pcre2el :type git :flavor melpa :files ("pcre2el.el" "pcre2el-pkg.el") :host github :repo "joddie/pcre2el") "smartparens" (smartparens :type git :flavor melpa :host github :repo "Fuco1/smartparens") "ws-butler" (ws-butler :type git :flavor melpa :host github :repo "lewang/ws-butler") "projectile" (projectile :type git :flavor melpa :files ("projectile.el" "projectile-pkg.el") :host github :repo "bbatsov/projectile") "general" (general :type git :flavor melpa :host github :repo "noctuid/general.el") "which-key" (which-key :type git :flavor melpa :host github :repo "justbur/emacs-which-key") "company" (company :type git :flavor melpa :host github :repo "company-mode/company-mode") "company-dict" (company-dict :type git :flavor melpa :host github :repo "hlissner/emacs-company-dict") "swiper" (swiper :type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper") "amx" (amx :type git :flavor melpa :host github :repo "DarwinAwardWinner/amx") "counsel-projectile" (counsel-projectile :type git :flavor melpa :host github :repo "ericdanan/counsel-projectile") "ivy-rich" (ivy-rich :type git :flavor melpa :files ("*.el" "ivy-rich-pkg.el") :host github :repo "Yevgnen/ivy-rich") "wgrep" (wgrep :type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep") "doom-themes" (doom-themes :type git :flavor melpa :files (:defaults "themes/*.el" "doom-themes-pkg.el") :host github :repo "hlissner/emacs-doom-themes") "solaire-mode" (solaire-mode :type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode") "hl-todo" (hl-todo :type git :flavor melpa :host github :repo "tarsius/hl-todo") "doom-modeline" (doom-modeline :type git :flavor melpa :host github :repo "seagle0128/doom-modeline") "anzu" (anzu :type git :flavor melpa :host github :repo "emacsorphanage/anzu") "evil-anzu" (evil-anzu :type git :flavor melpa :host github :repo "emacsorphanage/evil-anzu") "evil-goggles" (evil-goggles :type git :flavor melpa :host github :repo "edkolev/evil-goggles") "git-gutter-fringe" (git-gutter-fringe :type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe") "vi-tilde-fringe" (vi-tilde-fringe :type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe") "persp-mode" (persp-mode :type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el") "evil" (evil :type git :flavor melpa :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil") "evil-args" (evil-args :type git :flavor melpa :host github :repo "wcsmith/evil-args") "evil-easymotion" (evil-easymotion :type git :flavor melpa :host github :repo "PythonNut/evil-easymotion") "evil-embrace" (evil-embrace :type git :flavor melpa :host github :repo "cute-jumper/evil-embrace.el") "evil-escape" (evil-escape :type git :flavor melpa :host github :repo "syl20bnr/evil-escape") "evil-exchange" (evil-exchange :type git :flavor melpa :host github :repo "Dewdrops/evil-exchange") "evil-indent-plus" (evil-indent-plus :type git :flavor melpa :host github :repo "TheBB/evil-indent-plus") "evil-lion" (evil-lion :type git :flavor melpa :files ("evil-lion.el" "evil-lion-pkg.el") :host github :repo "edkolev/evil-lion") "evil-nerd-commenter" (evil-nerd-commenter :type git :flavor melpa :host github :repo "redguardtoo/evil-nerd-commenter") "evil-numbers" (evil-numbers :type git :flavor melpa :host github :repo "cofi/evil-numbers") "evil-snipe" (evil-snipe :type git :flavor melpa :host github :repo "hlissner/evil-snipe") "evil-surround" (evil-surround :type git :flavor melpa :host github :repo "emacs-evil/evil-surround") "evil-textobj-anyblock" (evil-textobj-anyblock :type git :flavor melpa :host github :repo "noctuid/evil-textobj-anyblock") "evil-traces" (evil-traces :type git :flavor melpa :host github :repo "mamapanda/evil-traces") "evil-visualstar" (evil-visualstar :type git :flavor melpa :host github :repo "bling/evil-visualstar") "exato" (exato :type git :flavor melpa :host github :repo "ninrod/exato") "evil-quick-diff" nil "evil-collection" (evil-collection :type git :flavor melpa :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection") "yasnippet" (yasnippet :type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet") "vimish-fold" (vimish-fold :type git :flavor melpa :host github :repo "matsievskiysv/vimish-fold") "evil-vimish-fold" (evil-vimish-fold :type git :flavor melpa :host github :repo "alexmurray/evil-vimish-fold") "auto-yasnippet" (auto-yasnippet :type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet") "doom-snippets" nil "diredfl" (diredfl :type git :flavor melpa :host github :repo "purcell/diredfl") "dired-git-info" nil "diff-hl" (diff-hl :type git :flavor melpa :host github :repo "dgutov/diff-hl") "dired-rsync" (dired-rsync :type git :flavor melpa :host github :repo "stsquad/dired-rsync") "fd-dired" (fd-dired :type git :flavor melpa :host github :repo "yqrashawn/fd-dired") "undo-fu" (undo-fu :type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu") "undo-fu-session" (undo-fu-session :type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu-session") "browse-at-remote" (browse-at-remote :type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote") "git-commit" (git-commit :type git :flavor melpa :files ("lisp/git-commit.el" "git-commit-pkg.el") :host github :repo "magit/magit") "git-timemachine" (git-timemachine :type git :flavor melpa :host gitlab :repo "pidu/git-timemachine") "gitconfig-mode" (gitconfig-mode :type git :flavor melpa :files ("gitconfig-mode.el" "gitconfig-mode-pkg.el") :host github :repo "magit/git-modes") "gitignore-mode" (gitignore-mode :type git :flavor melpa :files ("gitignore-mode.el" "gitignore-mode-pkg.el") :host github :repo "magit/git-modes") "multi-term" (multi-term :type git :flavor melpa :host github :repo "manateelazycat/multi-term") "flycheck" (flycheck :type git :flavor melpa :host github :repo "flycheck/flycheck") "flycheck-popup-tip" (flycheck-popup-tip :type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip") "langtool" (langtool :type git :flavor melpa :files ("langtool.el" "langtool-pkg.el") :host github :repo "mhayashi1120/Emacs-langtool") "writegood-mode" (writegood-mode :type git :flavor melpa :host github :repo "bnbeckwith/writegood-mode") "ansible" (ansible :type git :flavor melpa :files ("*.el" "snippets" "dict" "ansible-pkg.el") :host github :repo "k1LoW/emacs-ansible") "ansible-doc" (ansible-doc :type git :flavor melpa :host github :repo "emacsorphanage/ansible-doc") "jinja2-mode" (jinja2-mode :type git :flavor melpa :host github :repo "paradoxxxzero/jinja2-mode") "yaml-mode" (yaml-mode :type git :flavor melpa :host github :repo "yoshiki/yaml-mode") "company-ansible" (company-ansible :type git :flavor melpa :host github :repo "krzysztof-magosa/company-ansible") "realgud" (realgud :type git :flavor melpa :files ("realgud.el" "realgud/.nosearch" "realgud-recursive-autoloads.el" ("realgud/common" "realgud/common/*.el") ("realgud/common/buffer" "realgud/common/buffer/*.el") ("realgud/debugger/bashdb" "realgud/debugger/bashdb/*.el") ("realgud/debugger/gdb" "realgud/debugger/gdb/*.el") ("realgud/debugger/gub" "realgud/debugger/gub/*.el") ("realgud/debugger/ipdb" "realgud/debugger/ipdb/*.el") ("realgud/debugger/jdb" "realgud/debugger/jdb/*.el") ("realgud/debugger/kshdb" "realgud/debugger/kshdb/*.el") ("realgud/debugger/nodejs" "realgud/debugger/nodejs/*.el") ("realgud/debugger/pdb" "realgud/debugger/pdb/*.el") ("realgud/debugger/perldb" "realgud/debugger/perldb/*.el") ("realgud/debugger/rdebug" "realgud/debugger/rdebug/*.el") ("realgud/debugger/remake" "realgud/debugger/remake/*.el") ("realgud/debugger/trepan" "realgud/debugger/trepan/*.el") ("realgud/debugger/trepan.pl" "realgud/debugger/trepan.pl/*.el") ("realgud/debugger/trepan2" "realgud/debugger/trepan2/*.el") ("realgud/debugger/trepan3k" "realgud/debugger/trepan3k/*.el") ("realgud/debugger/trepanjs" "realgud/debugger/trepanjs/*.el") ("realgud/debugger/zshdb" "realgud/debugger/zshdb/*.el") ("realgud/lang" "realgud/lang/*.el") "realgud-pkg.el") :host github :repo "realgud/realgud") "realgud-trepan-ni" (realgud-trepan-ni :type git :flavor melpa :files (:defaults ("trepan-ni" "trepan-ni/*.el") "realgud-trepan-ni-pkg.el") :host github :repo "realgud/realgud-trepan-ni") "quickrun" (quickrun :type git :flavor melpa :host github :repo "emacsorphanage/quickrun") "eros" (eros :type git :flavor melpa :host github :repo "xiongtx/eros") "dumb-jump" (dumb-jump :type git :flavor melpa :host github :repo "jacktasia/dumb-jump") "ivy-xref" (ivy-xref :type git :flavor melpa :host github :repo "alexmurray/ivy-xref") "request" (request :type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request") "magit" (magit :type git :flavor melpa :files ("lisp/magit" "lisp/magit*.el" "lisp/git-rebase.el" "Documentation/magit.texi" "Documentation/AUTHORS.md" "LICENSE" (:exclude "lisp/magit-libgit.el") "magit-pkg.el") :host github :repo "magit/magit") "magit-gitflow" (magit-gitflow :type git :flavor melpa :host github :repo "jtatarik/magit-gitflow") "magit-todos" (magit-todos :type git :flavor melpa :host github :repo "alphapapa/magit-todos") "github-review" (github-review :type git :flavor melpa :host github :repo "charignon/github-review") "makefile-executor" (makefile-executor :type git :flavor melpa :host github :repo "thiderman/makefile-executor.el") "xclip" nil "evil-terminal-cursor-changer" (evil-terminal-cursor-changer :type git :flavor melpa :host github :repo "7696122/evil-terminal-cursor-changer") "cmake-mode" (cmake-mode :type git :flavor melpa :files ("Auxiliary/*.el" "cmake-mode-pkg.el") :repo "https://gitlab.kitware.com/cmake/cmake.git") "cuda-mode" (cuda-mode :type git :flavor melpa :host github :repo "chachi/cuda-mode") "demangle-mode" (demangle-mode :type git :flavor melpa :host github :repo "liblit/demangle-mode") "disaster" (disaster :type git :flavor melpa :files ("disaster.el" "disaster-pkg.el") :host github :repo "jart/disaster") "modern-cpp-font-lock" (modern-cpp-font-lock :type git :flavor melpa :host github :repo "ludwigpacifici/modern-cpp-font-lock") "opencl-mode" (opencl-mode :type git :flavor melpa :host github :repo "salmanebah/opencl-mode") "glsl-mode" (glsl-mode :type git :flavor melpa :host github :repo "jimhourihan/glsl-mode") "company-glsl" (company-glsl :type git :flavor melpa :host github :repo "guidoschmidt/company-glsl") "irony" (irony :type git :flavor melpa :files ("*.el" "server" "irony-pkg.el") :host github :repo "Sarcasm/irony-mode") "irony-eldoc" (irony-eldoc :type git :flavor melpa :host github :repo "ikirill/irony-eldoc") "flycheck-irony" (flycheck-irony :type git :flavor melpa :host github :repo "Sarcasm/flycheck-irony") "company-irony" (company-irony :type git :flavor melpa :host github :repo "Sarcasm/company-irony") "company-irony-c-headers" (company-irony-c-headers :type git :flavor melpa :host github :repo "hotpxl/company-irony-c-headers") "rtags" (rtags :type git :flavor melpa :files ("src/rtags.el" "rtags-pkg.el") :host github :repo "Andersbakken/rtags") "crystal-mode" (crystal-mode :type git :flavor melpa :files ("crystal-mode.el" "crystal-mode-pkg.el") :host github :repo "crystal-lang-tools/emacs-crystal-mode") "inf-crystal" (inf-crystal :type git :flavor melpa :host github :repo "brantou/inf-crystal.el") "flycheck-crystal" (flycheck-crystal :type git :flavor melpa :files ("flycheck-crystal.el" "flycheck-crystal-pkg.el") :host github :repo "crystal-lang-tools/emacs-crystal-mode") "flycheck-ameba" (flycheck-ameba :type git :flavor melpa :files ("flycheck-ameba.el" "flycheck-ameba-pkg.el") :host github :repo "crystal-ameba/ameba.el") "csharp-mode" (csharp-mode :type git :flavor melpa :host github :repo "josteink/csharp-mode") "csproj-mode" (csproj-mode :type git :flavor melpa :files (:defaults "snippets" "csproj-mode-pkg.el") :host github :repo "omajid/csproj-mode") "omnisharp" (omnisharp :type git :flavor melpa :branch "master" :host github :repo "OmniSharp/omnisharp-emacs") "csv-mode" nil "elixir-mode" (elixir-mode :type git :flavor melpa :host github :repo "elixir-editors/emacs-elixir") "alchemist" (alchemist :type git :flavor melpa :files (:defaults "*.exs" "alchemist-server" "alchemist-pkg.el") :host github :repo "tonini/alchemist.el") "exunit" (exunit :type git :flavor melpa :host github :repo "ananthakumaran/exunit.el") "flycheck-credo" (flycheck-credo :type git :flavor melpa :host github :repo "aaronjensen/flycheck-credo") "elm-mode" (elm-mode :type git :flavor melpa :files (:defaults "elm.tags" "elm-mode-pkg.el") :host github :repo "jcollard/elm-mode") "flycheck-elm" (flycheck-elm :type git :flavor melpa :host github :repo "bsermons/flycheck-elm") "highlight-quoted" (highlight-quoted :type git :flavor melpa :host github :repo "Fanael/highlight-quoted") "macrostep" (macrostep :type git :flavor melpa :host github :repo "joddie/macrostep") "overseer" (overseer :type git :flavor melpa :host github :repo "tonini/overseer.el") "elisp-def" (elisp-def :type git :flavor melpa :host github :repo "Wilfred/elisp-def") "elisp-demos" (elisp-demos :type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos") "flycheck-cask" (flycheck-cask :type git :flavor melpa :host github :repo "flycheck/flycheck-cask") "buttercup" (buttercup :type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup") "erlang" (erlang :type git :flavor melpa :files ("lib/tools/emacs/*.el" (:exclude "lib/tools/emacs/erlang_appwiz.el") "erlang-pkg.el") :host github :repo "erlang/otp") "company-erlang" (company-erlang :type git :flavor melpa :files (:defaults "company-erlang-pkg.el") :host github :repo "s-kostyaev/company-erlang") "gdscript-mode" (gdscript-mode :type git :flavor melpa :host github :repo "godotengine/emacs-gdscript-mode") "go-eldoc" (go-eldoc :type git :flavor melpa :host github :repo "emacsorphanage/go-eldoc") "go-guru" (go-guru :type git :flavor melpa :files ("go-guru.el" "go-guru-pkg.el") :host github :repo "dominikh/go-mode.el") "go-mode" (go-mode :type git :flavor melpa :files ("go-mode.el" "go-mode-pkg.el") :host github :repo "dominikh/go-mode.el") "gorepl-mode" (gorepl-mode :type git :flavor melpa :host github :repo "manute/gorepl-mode") "go-tag" (go-tag :type git :flavor melpa :host github :repo "brantou/emacs-go-tag") "go-gen-test" (go-gen-test :type git :flavor melpa :files (:defaults "go-gen-test.el" "go-gen-test-pkg.el") :host github :repo "s-kostyaev/go-gen-test") "company-go" (company-go :type git :flavor melpa :files ("emacs-company/company-go.el" "company-go-pkg.el") :host github :repo "mdempsky/gocode") "flycheck-golangci-lint" (flycheck-golangci-lint :type git :flavor melpa :host github :repo "weijiangan/flycheck-golangci-lint") "haskell-mode" (haskell-mode :type git :flavor melpa :files (:defaults "NEWS" "logo.svg" "haskell-mode-pkg.el") :host github :repo "haskell/haskell-mode") "dante" (dante :type git :flavor melpa :host github :repo "jyp/dante") "attrap" (attrap :type git :flavor melpa :host github :repo "jyp/attrap") "json-mode" (json-mode :type git :flavor melpa :host github :repo "joshwnj/json-mode") "json-snatcher" (json-snatcher :type git :flavor melpa :host github :repo "Sterlingg/json-snatcher") "counsel-jq" (counsel-jq :type git :flavor melpa :host github :repo "200ok-ch/counsel-jq") "coffee-mode" (coffee-mode :type git :flavor melpa :host github :repo "defunkt/coffee-mode") "js2-mode" (js2-mode :type git :flavor melpa :host github :repo "mooz/js2-mode") "rjsx-mode" (rjsx-mode :type git :flavor melpa :host github :repo "felipeochoa/rjsx-mode") "typescript-mode" (typescript-mode :type git :flavor melpa :host github :repo "emacs-typescript/typescript.el") "js2-refactor" (js2-refactor :type git :flavor melpa :host github :repo "magnars/js2-refactor.el") "npm-mode" (npm-mode :type git :flavor melpa :host github :repo "mojochao/npm-mode") "add-node-modules-path" (add-node-modules-path :type git :flavor melpa :host github :repo "codesuki/add-node-modules-path") "nodejs-repl" (nodejs-repl :type git :flavor melpa :host github :repo "abicky/nodejs-repl.el") "skewer-mode" (skewer-mode :type git :flavor melpa :files ("*.html" "*.js" "*.el" "skewer-mode-pkg.el") :host github :repo "skeeto/skewer-mode") "tide" (tide :type git :flavor melpa :files (:defaults "tsserver" "tide-pkg.el") :host github :repo "ananthakumaran/tide") "xref-js2" (xref-js2 :type git :flavor melpa :host github :repo "NicolasPetton/xref-js2") "lua-mode" (lua-mode :type git :flavor melpa :files (:defaults "scripts" "lua-mode-pkg.el") :host github :repo "immerrr/lua-mode") "company-lua" (company-lua :type git :flavor melpa :files (:defaults "lua" "company-lua-pkg.el") :host github :repo "ptrv/company-lua") "markdown-mode" (markdown-mode :type git :flavor melpa :host github :repo "jrblevin/markdown-mode") "markdown-toc" (markdown-toc :type git :flavor melpa :host github :repo "ardumont/markdown-toc") "edit-indirect" (edit-indirect :type git :flavor melpa :host github :repo "Fanael/edit-indirect") "evil-markdown" nil "nim-mode" (nim-mode :type git :flavor melpa :host github :repo "nim-lang/nim-mode") "flycheck-nim" (flycheck-nim :type git :flavor melpa :host github :repo "ALSchwalm/flycheck-nim") "org-mode" nil "avy" (avy :type git :flavor melpa :host github :repo "abo-abo/avy") "htmlize" (htmlize :type git :flavor melpa :host github :repo "hniksic/emacs-htmlize") "org-yt" nil "ox-clip" (ox-clip :type git :flavor melpa :host github :repo "jkitchin/ox-clip") "toc-org" (toc-org :type git :flavor melpa :host github :repo "snosov1/toc-org") "org-cliplink" (org-cliplink :type git :flavor melpa :host github :repo "rexim/org-cliplink") "evil-org" (evil-org :type git :flavor melpa :host github :repo "Somelauw/evil-org-mode") "orgit" (orgit :type git :flavor melpa :host github :repo "magit/orgit") "ob-async" (ob-async :type git :flavor melpa :host github :repo "astahlman/ob-async") "ob-crystal" (ob-crystal :type git :flavor melpa :host github :repo "brantou/ob-crystal") "ob-go" (ob-go :type git :flavor melpa :host github :repo "pope/ob-go") "ob-nim" (ob-nim :type git :flavor melpa :host github :repo "Lompik/ob-nim") "pip-requirements" (pip-requirements :type git :flavor melpa :host github :repo "Wilfred/pip-requirements.el") "anaconda-mode" (anaconda-mode :type git :flavor melpa :host github :repo "pythonic-emacs/anaconda-mode") "company-anaconda" (company-anaconda :type git :flavor melpa :host github :repo "pythonic-emacs/company-anaconda") "pipenv" (pipenv :type git :flavor melpa :host github :repo "pwalsh/pipenv.el") "pyvenv" (pyvenv :type git :flavor melpa :host github :repo "jorgenschaefer/pyvenv") "nose" nil "python-pytest" (python-pytest :type git :flavor melpa :host github :repo "wbolster/emacs-python-pytest") "pyimport" (pyimport :type git :flavor melpa :host github :repo "Wilfred/pyimport") "py-isort" (py-isort :type git :flavor melpa :host github :repo "paetzke/py-isort.el") "company-shell" (company-shell :type git :flavor melpa :files ("company-shell.el" "company-shell-pkg.el") :host github :repo "Alexander-Miller/company-shell") "drag-stuff" (drag-stuff :type git :flavor melpa :host github :repo "rejeep/drag-stuff.el") "link-hint" (link-hint :type git :flavor melpa :host github :repo "noctuid/link-hint.el") "seq" nil "popup" (popup :type git :flavor melpa :files ("popup.el" "popup-pkg.el") :host github :repo "auto-complete/popup-el") "load-relative" (load-relative :type git :flavor melpa :host github :repo "rocky/emacs-load-relative") "loc-changes" (loc-changes :type git :flavor melpa :files ("loc-changes.el" "loc-changes-pkg.el") :host github :repo "rocky/emacs-loc-changes") "test-simple" (test-simple :type git :flavor melpa :host github :repo "rocky/emacs-test-simple") "magit-popup" (magit-popup :type git :flavor melpa :host github :repo "magit/magit-popup") "ghub" (ghub :type git :flavor melpa :host github :repo "magit/ghub") "treepy" (treepy :type git :flavor melpa :host github :repo "volrath/treepy.el") "deferred" (deferred :type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred") "a" (a :type git :flavor melpa :host github :repo "plexus/a.el") "json" nil "auto-complete" (auto-complete :type git :flavor melpa :files ("*.el" "dict" "auto-complete-pkg.el") :host github :repo "auto-complete/auto-complete") "reformatter" (reformatter :type git :flavor melpa :host github :repo "purcell/reformatter.el") "ivy-erlang-complete" (ivy-erlang-complete :type git :flavor melpa :files (:defaults "bin" "ivy-erlang-complete-pkg.el") :host github :repo "s-kostyaev/ivy-erlang-complete") "lcr" (lcr :type git :flavor melpa :host github :repo "jyp/lcr") "json-reformat" (json-reformat :type git :flavor melpa :host github :repo "gongo/json-reformat") "multiple-cursors" (multiple-cursors :type git :flavor melpa :host github :repo "magnars/multiple-cursors.el") "simple-httpd" (simple-httpd :type git :flavor melpa :host github :repo "skeeto/emacs-web-server") "epc" (epc :type git :flavor melpa :files ("epc.el" "epcs.el" "epc-pkg.el") :host github :repo "kiwanami/emacs-epc") "concurrent" (concurrent :type git :flavor melpa :files ("concurrent.el" "concurrent-pkg.el") :host github :repo "kiwanami/emacs-deferred") "ctable" (ctable :type git :flavor melpa :files ("ctable.el" "ctable-pkg.el") :host github :repo "kiwanami/emacs-ctable") "commenter" (commenter :type git :flavor melpa :host github :repo "yuutayamada/commenter") "flycheck-nimsuggest" (flycheck-nimsuggest :type git :flavor melpa :host github :repo "yuutayamada/flycheck-nimsuggest") "pythonic" (pythonic :type git :flavor melpa :host github :repo "pythonic-emacs/pythonic") "shut-up" (shut-up :type git :flavor melpa :host github :repo "cask/shut-up"))) gnu-elpa-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 3 "explain-pause-mode" nil "straight" nil "evil-quick-diff" nil "doom-snippets" nil "dired-git-info" (dired-git-info :type git :host github :repo "emacs-straight/dired-git-info" :files ("*" (:exclude ".git"))) "xclip" (xclip :type git :host github :repo "emacs-straight/xclip" :files ("*" (:exclude ".git"))) "csv-mode" (csv-mode :type git :host github :repo "emacs-straight/csv-mode" :files ("*" (:exclude ".git"))) "evil-markdown" nil "org-mode" nil "org-yt" nil "nose" nil "seq" nil "json" nil)) el-get #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 1 "explain-pause-mode" nil "straight" nil "evil-quick-diff" nil "doom-snippets" nil "evil-markdown" nil "org-mode" nil "org-yt" nil "nose" nil "seq" nil "json" nil)) emacsmirror-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "explain-pause-mode" (explain-pause-mode :type git :host github :repo "emacsmirror/explain-pause-mode") "straight" (straight :type git :host github :repo "emacsmirror/straight") "evil-quick-diff" nil "doom-snippets" nil "evil-markdown" nil "org-mode" nil "org-yt" nil "nose" (nose :type git :host github :repo "emacsattic/nose") "seq" nil "json" nil))))

("org-elpa" "melpa" "gnu-elpa-mirror" "el-get" "emacsmirror-mirror" "straight" "emacs" "use-package" "bind-key" "auto-minor-mode" "gcmh" "explain-pause-mode" "all-the-icons" "hide-mode-line" "highlight-numbers" "rainbow-delimiters" "restart-emacs" "better-jumper" "dtrt-indent" "helpful" "pcre2el" "smartparens" "ws-butler" "projectile" "general" "which-key" "company" "company-dict" "swiper" "ivy" "ivy-hydra" "ivy-avy" "counsel" "amx" "counsel-projectile" "ivy-rich" "wgrep" "doom-themes" "solaire-mode" "hl-todo" "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "git-gutter-fringe" "vi-tilde-fringe" "persp-mode" "evil" "evil-args" "evil-easymotion" "evil-embrace" "evil-escape" "evil-exchange" "evil-indent-plus" "evil-lion" "evil-nerd-commenter" "evil-numbers" "evil-snipe" "evil-surround" "evil-textobj-anyblock" "evil-traces" "evil-visualstar" "exato" "evil-quick-diff" "evil-collection" "yasnippet" "vimish-fold" "evil-vimish-fold" "auto-yasnippet" "doom-snippets" "diredfl" "dired-git-info" "diff-hl" "dired-rsync" "fd-dired" "undo-fu" "undo-fu-session" "browse-at-remote" "git-commit" "git-timemachine" "gitconfig-mode" "gitignore-mode" "multi-term" "flycheck" "flycheck-popup-tip" "langtool" "writegood-mode" "ansible" "ansible-doc" "jinja2-mode" "yaml-mode" "company-ansible" "realgud" "realgud-trepan-ni" "quickrun" "eros" "dumb-jump" "ivy-xref" "request" "magit" "magit-gitflow" "magit-todos" "github-review" "makefile-executor" "xclip" "evil-terminal-cursor-changer" "cmake-mode" "cuda-mode" "demangle-mode" "disaster" "modern-cpp-font-lock" "opencl-mode" "glsl-mode" "company-glsl" "irony" "irony-eldoc" "flycheck-irony" "company-irony" "company-irony-c-headers" "rtags" "ivy-rtags" "crystal-mode" "inf-crystal" "flycheck-crystal" "flycheck-ameba" "csharp-mode" "csproj-mode" "omnisharp" "csv-mode" "elixir-mode" "alchemist" "exunit" "flycheck-credo" "elm-mode" "flycheck-elm" "highlight-quoted" "macrostep" "overseer" "elisp-def" "elisp-demos" "flycheck-cask" "buttercup" "erlang" "company-erlang" "gdscript-mode" "go-eldoc" "go-guru" "go-mode" "gorepl-mode" "go-tag" "go-gen-test" "company-go" "flycheck-golangci-lint" "haskell-mode" "dante" "attrap" "json-mode" "json-snatcher" "counsel-jq" "coffee-mode" "js2-mode" "rjsx-mode" "typescript-mode" "js2-refactor" "npm-mode" "add-node-modules-path" "nodejs-repl" "skewer-mode" "tide" "xref-js2" "lua-mode" "company-lua" "markdown-mode" "markdown-toc" "edit-indirect" "evil-markdown" "nim-mode" "flycheck-nim" "org-mode" "avy" "htmlize" "org-yt" "ox-clip" "toc-org" "org-cliplink" "evil-org" "orgit" "ob-async" "ob-crystal" "ob-go" "ob-nim" "pip-requirements" "anaconda-mode" "company-anaconda" "pipenv" "pyvenv" "nose" "python-pytest" "pyimport" "py-isort" "company-shell" "drag-stuff" "link-hint" "memoize" "parent-mode" "dash" "dash-functional" "s" "f" "elisp-refs" "cl-lib" "pkg-info" "epl" "hydra" "lv" "shrink-path" "goto-chg" "git-gutter" "fringe-helper" "embrace" "expand-region" "annalist" "transient" "with-editor" "async" "let-alist" "seq" "popup" "load-relative" "loc-changes" "test-simple" "magit-popup" "ghub" "treepy" "deferred" "a" "json" "auto-complete" "reformatter" "ivy-erlang-complete" "lcr" "json-reformat" "multiple-cursors" "simple-httpd" "epc" "concurrent" "ctable" "commenter" "flycheck-nimsuggest" "org" "pythonic" "shut-up")

t
